- name: Change facts to use netfilter-persistent on Debian >= 9 or Ubuntu >= 16
  set_fact:
    iptables_save_command: "/usr/sbin/netfilter-persistent save"
    iptables_service: netfilter-persistent
  when: (ansible_distribution == 'Debian' and ansible_lsb.major_release|int >= 9) or (ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int >= 16)

- name: Install iptables-persistent (Redhat/CentOS)
  package:
    name: iptables-services
    state: present
  when: ansible_os_family == "RedHat"

- name: Install iptables-persistent (Debian/Ubuntu)
  package:
    name: iptables-persistent
    state: present
  when: ansible_os_family == "Debian"

- name: Enable iptables
  service:
    name: "{{ iptables_service }}"
    enabled: true
    state: started

- name: iptables - Allow VPN forwarding
  vars:
    net_mask: "{{ openvpn_server_network }}/{{ openvpn_server_netmask }}"
  iptables:
    action: insert
    chain: FORWARD
    source: "{{ openvpn_server_network }}/{{net_mask|ipaddr('prefix')}}"
    jump: ACCEPT
    comment: "Allow VPN forwarding"
  notify: "save iptables"

- name: iptables - Allow incoming VPN connection
  iptables:
    action: insert
    chain: INPUT
    protocol: "{{ openvpn_proto }}"
    destination_port: "{{ openvpn_port }}"
    jump: ACCEPT
    comment: "Allow incoming VPN connection"
  notify: "save iptables"

- name: iptables - Accept packets from VPN tunnel adaptor
  iptables:
    action: insert
    chain: INPUT
    in_interface: tun0
    jump: ACCEPT
    comment: "Accept packets from VPN tunnel adaptor"
  notify: "save iptables"

- name: iptables - Perform NAT readdressing
  vars:
    net_mask: "{{ openvpn_server_network }}/{{ openvpn_server_netmask }}"
  iptables:
    action: insert
    table: nat
    chain: POSTROUTING
    source: "{{ openvpn_server_network }}/{{net_mask|ipaddr('prefix')}}"
    to_source: "{{ ansible_default_ipv4.address }}"
    jump: SNAT
    comment: "Perform NAT readdressing"
  when: not openvpn_masquerade_not_snat

- name: iptables - Perform NAT readdressing with MASQUERADE
  vars:
    net_mask: "{{ openvpn_server_network }}/{{ openvpn_server_netmask }}"
  iptables:
    action: insert
    table: nat
    chain: POSTROUTING
    source: "{{ openvpn_server_network }}/{{net_mask|ipaddr('prefix')}}"
    jump: MASQUERADE
    comment: "Perform NAT readdressing"
  when: openvpn_masquerade_not_snat
  notify: "save iptables"
